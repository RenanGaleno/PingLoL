package pinglol;

import java.awt.event.ActionEvent;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.nio.channels.SocketChannel;
import java.util.Date;
import javax.swing.Timer;

/**
 *
 * @author Renan Galeno <g@renan.eng.br>
 * @version 1.0
 */
public class PingLoL extends javax.swing.JFrame {
    
    /**
     * Settings
     */
    private static final String SERVER_IP = "200.189.192.2";// IP do servidor do LoL

    /**
     * Creates new form PingLoL
     */
    public PingLoL() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PingLoL");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("0ms");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        jLabel1.setText(test(SERVER_IP, 443)+"ms");
        Timer timer = new Timer(2000, (ActionEvent e) -> {
            jLabel1.setText(test(SERVER_IP, 443)+"ms");
        });
        timer.setRepeats(true);
        timer.start();
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PingLoL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new PingLoL().setVisible(true);
        });
    }
    
    /**
     * Connect using layer4 (sockets) - http://www.mindchasers.com/dev/ping
     * 
     * @param
     * @return delay if the specified host responded, -1 if failed
     */
    static long test(String hostAddress, int port) {
            InetAddress inetAddress = null;
            InetSocketAddress socketAddress = null;
            long timeToRespond = -1;
            Date start, stop;

            try {
                    inetAddress = InetAddress.getByName(hostAddress);
            } catch (UnknownHostException e) {
                    System.err.println("Host desconhecido");
            }

            try {
                    socketAddress = new InetSocketAddress(inetAddress, port);
            } catch (IllegalArgumentException e) {
                    System.err.println("Porta inválida");
            }

            // Open the channel, set it to non-blocking, initiate connect
            try (SocketChannel sc = SocketChannel.open()) {
                    sc.configureBlocking(true);
                    start = new Date();
                    if (sc.connect(socketAddress)) {
                            stop = new Date();
                            timeToRespond = (stop.getTime() - start.getTime());
                    }
            } catch (IOException e) {
                    System.err.println("A conexão não pôde ser feita");
            }

            return timeToRespond;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
